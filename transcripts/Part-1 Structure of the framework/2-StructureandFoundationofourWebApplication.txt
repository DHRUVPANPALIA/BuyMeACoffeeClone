First will create.

You know, we will create actually the architecture.

That's the best thing to do first.

So to me, let's do index dot PHP obviously for the ID and it doesn't matter.

You can use Webstorm.

I mean actually for PHP is better to use PHP storm, you can use sublime, you can use atom, you can

use doesn't matter.

You can use any like just your favorite ID.

I know that nowadays a lot of people are using visual code, so Visual studio code is really good.

But for me like PHP stone now right now I'm on Webstorm.

Well it is what it is and it's good too.

Um, so actually I can just notice that my file I think I will use vs code perhaps.

Okay.

So now I'm on vs code.

Beautiful haze and here I will.

Um, that's my index dot php file.

Um, so there it's actually where we will receive all the requests.

This file is important because we will have to dispatch the URL.

We will have to do a lot of work.

Obviously we will split all the logic in different folders and files.

Sometimes in some projects we see a huge index dot php file.

This is not good.

You shouldn't do that because it's it's hard to read.

It's hard to understand, it's hard to maintain.

So let's actually I will go to the folder.

So that's a folder we just close.

Um Screenflow So the folder will be pretty much we will have a folder called kernel.

So kernel is like our framework is where we'll have everything important.

Then we'll have um, templates or views.

It really depends because actually here our application, it's, it's a server side rendering that means

it's not client side rendering.

So the server will render the HTML code and so on.

Um, so index and what else inside of kernel probably.

Let's go back to actually um, visual code or your favorite ID and here we'll have a file called.

Um, let's see.

Maybe router, um, http because we'll have our request.

Sometimes it's first wait.

First I will have router routes where we will have.

Hmm.

Because there you see we are going to dispatch all the URLs in the root file.

It's a bit like I don't know if you have used a framework before in the past, but it's a bit similar

to Laravel or Symphony and we will have a env file as well and we need maybe we'll have a config folder.

So let's create a folder and the name will be config.

And let's clear that up for the Suez.

Up for the will.

Move it to the route one.

To the root for the ups.

It doesn't want up for the.

Perfect move.

Awesome.

So there we will have the config for that actually.

So we'll move it inside and um, I have already a git.

Ignore that one.

Oh that's from um.

I will remove actually that file.

This one is from uh, from webstorm.

But we are actually not going to use Webstorm so I'm going to use a terminal nowadays.

It's nice because in, in the majority of, of the Ides you can find out there you have a terminal,

you can open a terminal session and it's really handy.

So I will just remove, um, idea.

Perfect.

So let's also create a git ignore as well.

So git ignore is really nice because when we will commit our files to GitHub or bitbucket or GitLab,

we mentioned two git files we don't want, uh, git to, to be committed.

For instance, if I use phpstorm, I will have the ID folder in my case now removed it, but maybe I

will use webstorm or phpstorm or IntelliJ before later.

Sorry.

Later on.

So I might already add it and we will have different files as well.

Like usually log.

It means we don't want to have any log files there.

If I use a third party package with composer for instance, I don't want to have the vendor folder because

it will add a vendor folder.

I don't need the slash here, but I like to add a slash so I can know this is a folder I ignore and

that's not a folder, that's a that's files.

Um, so let's start with this and route.

So there I will have my, my routes, I will have a dispatcher, so I will probably create a different

file.

Let's create bootstrap.

And Bootstrap will be the main file that will handle a lot of things.

It's a bit like a front controller if you know the design pattern of the front controller.

It handles everything that needs to be handled for that specific controller.

For instance, it will initialize the environment variables, but also the routine requests for that

specific controller from the UI.

So it will get the URL and it will translate to the to the specific into a code to, to know, okay,

that that URL I receive it, I will call the the router or the Http request class or whatever and then

I will trigger that controller.

It's basically a one point of entry.

So it's like the, the front controller or the bootstrap allows only one point of, of entry from the

web, especially the front controller.

So every request will go to the front controller and the front controller will handle everything, initialize

all the needed classes and routine requests and so on, and then it will give back the response.

So now let's create the bootstrap class.

So let's do class bootstrap.

And with PHP actually, because here it's bootstrap, we can set a class as final.

So when you set the class as final, it means all the classes.

So I don't know if I have bootstrap two or bootstrap three won't won't be able to extend from bootstrap

because it's final.

I prevent it every other single class to extend to extend from bootstrap.

Perfect.

And so I will now have a constructor.

So in PHP, a constructor you declare it with public function double underscore.

It's really important construct.

So what a constructor does.

The constructor will be called every time you create a new object of the bootstrap class.

So for instance here I will do app equal equal sign bootstrap and because I created a new object.

So app is the new is the object that will it will create bootstrap.

So here I'll do the creation of the object bootstrap.

The class bootstrap will call constructor.

So when I create a new object, every time it will call bootstrap.

The constructor and the constructor will initialize the properties of the object for.

So for instance, if I have a property called.

Goods?

Well, it will initialize here goods with a default value.

So it will do.

By doing this, I say this from the class root and then I will have a value here and a default value.

In our case, we don't need that right now.

So I will leave it like this, By the way.

Maybe you might think why I have a block here.

Actually, I use a really nice extension called, um, Block man.

So let's go to my extensions and you see.

Block Man and block man does this.

It makes your job very easy because you see directly where your.

Function, your method ends and start.

So I will have probably also a private method, so private function.

Initialize.

Initialize.

And here I will just it will initialize a lot of things.

I will have something else to, to load all the files, everything I need.

So basically what I will do is, um, I will.

Let's, let's initialize, let's have composer.

So I have composer already installed.

But in case you don't composer install, you can install composer and I will use a package for to to

load a our environment variables.

So you have spot env dot env is really common one.

It's really famous but today we'll use the symphony one.

I will try the symphony one.

It looks like now the symphony one is more updated.

I mean they they release more updates than the dot env but now it's up to you.

Both of them are really good.

So if first you need obviously to install composer, so I suggest you to install composer.

In my case I have composer v2.

Uh, let's see.

Version.

You see.

Composer.

TI TI TI TI TI point seven.

So now I will just install symphony dot env.

And will also, by the way, already installed PHP mailer.

So PHP, Mailer Symphony sorry, Symphony, the Mailer Symphony.

It replaces the swift mailer.

So I don't know if you remember Swift Mailer, PHP, Swift mailer and now actually they, they rebranded

into Oh wait, that's the PHP mailer.

Sorry.

And they use.

Symphony as well.

This is not the class we want to use.

That's a really different class.

That one is nice, but actually it doesn't have really good practice.

And because they use public property of a class, it's I don't really like it for some reason.

Symfony Mail.

If I type this, let's see where it is.

Symphony mail.

It's that one.

Beautiful.

So we'll install that one as well.

Amazing.

And you will see now if you check.

Well, I have a composer dot Json file and composer dot log.

So I can I can make sure that the people who will install my project will have exactly the same version

as me if I commit this one.

If I don't want to commit composer dot log dot log, that's fine.

I will have to declare it here.

And the person obviously when we do composer install it will install the latest versions mentioned from

here.

So it will be maybe 6.8 that person will have.

But if I have composer Dot Lock as well committed, the person will have exactly the same version as

me.

So for me, I'll leave the composer dot Lock and beautiful.

So this is done and we can already actually use um, the previous one for the env file to load the env

file.

So let's see why it is.

Um.

Symphony dot in.

Perfect is probably it's that one and you see it, it's it's that's the way you use it.

So first let's import.

Um, here.

Actually, we can already declare a namespace.

I will do namespace.

Um, well.

Maybe.

My.

My.

Buy me a coffee clone or maybe something different like.

It's really up to you.

Maybe I will leave this one as a namespace, but it's.

It's basically.

It's up to you.

A namespace is nice because with thanks to the namespace, you can have two same class name and it won't

conflict with each other because they will be into a different namespace.

And also when you use composer Autoload it will use the namespace.

Um Autoload composer.

It will use the namespace to know in what folder the the file is.

So that's why it's nice to have namespace because it knows exactly how to load the different classes

and the different files.

So for later on it will also be very handy.

So here for us we will just load.

I will create another method here private.

Private function.

Um.

Environment.

Variables.

And here and it returns void.

It means it doesn't return anything.

And so we are going to do.

Maybe I will, um, I will have this as a parameter.

So we do, um.

With a dependency injection here.

Dot inv and dot inf.

So here I do this.

I will add a space and I will create a new file.

Dot env here.

And also so dot env has private.

I mean we will have confidential details, private details such as the database password and so on.

So we will create another generic one dot env dot dist and that one will be we will commit that one

and the person who will install our project will have to rename dot dot dist to INF.

But dot inf we don't want to have it committed.

So let's add it in git ignore and so far so good.

So you see in the constructor we will initialize already the environment variables.

Perfect.

So we are loading our environment variables.

And here.

Um.

Yes, that's the same name.

I was just checking if the name was the same because usually I'm used to PHP storm and here apparently

when I click here, it doesn't go up directly there.

Maybe it's because of my plugin I use block command.

Um, so I will load the load variable here env and we have the env.

So we, we are just going to add some environment variables.

So site name.

So actually if you are not used to the this plugin, the dot env, what does it do.

It will populate those variables to a environment variables.

So to a server variable.

So it will do a server and the name of the variable.

Oops.

Sorry.

Actually yes, it will do exactly this or it will do another one.

I don't know if I can if they have read me inside of that package just to show it to you with me.

Okay.

Here is so.

That's nice.

So you see, this is how you can use it.

And, um, yeah, you see it will be populated in server and env so you can have access to it with server

or just with env.

Or even with get envy.

But this is not a recommended way to to do so.

Usually when you are on environment.

Um, on environment machines like on localhost it's nice to use env variables.

And once you deploy your application to AWS.

For instance, you can set the variables in there in the dashboard or in the web hosting dashboard.

But you can still continue to use the dot env package if you wish.

So sitename it will be.

Um, buy me a coffee and double f and then I will have email.

Um.

Admin.

Email.

Admin email.

Would just set my email address.

Beautiful.

As you can see, I use double quotes usually in env file if it's only numbers, only digits or only

mean alphanumeric.

You don't need to use double quotes.

So in this case you don't.

However, if I have some space or colon or some different characters like Asterix, then I will need

um, double quotes.

But it's always a good practice to use double quotes.

Um, and obviously we'll have a site URL as well.

And here it will just be http four slash now localhost and 8080 after.

So it's on the port 8080 after we can change this.

And here, um, we are going to do um dot env so we'll create an object dot env it will be new dot env

beautiful.

So that's actually an instance of the dot env.

So I have an instance of the object and then I can do this or I can just do new here.

In my case I will just um, insert it this way with the variable there.

So I give the instance of dot env to this method and it will load the env.

Um, local variables and beautiful.

So that's already really good.

We can already do a check and test this.

So obviously in our.

Hmm.

So let's go to, uh, in our index file.

Um, how we will test it.

Dotchin we can do eco envy and then I will have oops, um, site name and let's test that way.

And let's see if it works.

So I will use the inbuilt PHP server available since PHP 5.4 if I'm not mistaken.

And so it will be.

Um.

127001.

This is the localhost port and let's start it.

And now I can click here.

And you can see I have actually an error.

So my error is on line three and bootstrap is not found.

You know why?

It's because we don't load it.

We didn't load that file in the index file.

So we'll have to include it.

But the a better way to do so is to to use a namespace.

We create it here.

Buy me a coffee and a colon and then bootstrap.

And we are going to use the auto load from composer in The composer offers you a nice way to auto load

the author class.

Actually they use a PHP auto load so you can just do auto load dot php.

Yeah, I need a slash here.

And normally let's have a look.

Vendor or.

Yeah.

Vendor It's here.

Vendor.

Um.

Auto.

Yeah.

I don't know why um vs code doesn't doesn't say to me that it's that one but yeah, it's the right one.

And in composer I will also use I will do um, auto load and here it will be PS4 and then you will have

the class.

So normally you have the main, the main namespace.

So the main namespace.

Um, okay.

Okay.

Why is composer it's here.

So the main namespace is this one.

I need double backslash and then I will say it's in SRC.

Actually we are.

We are going to create a SRC for the.

I didn't create one somehow, but this is a nice convention.

It says um, because I mean it's most of the projects have now as SRC and test folder.

So SRC stands for source.

We are going to move everything in the so I'm going to move to move not the env file but everything

else will move to the SRC.

Yes.

And so that's for source.

Um, it stands for source and then will have another folder.

Oops.

Not inventor.

I will have another folder in the root.

The fate.

And that one will be tests.

Beautiful.

So now have test views will stay.

Mm.

Yeah.

We'll leave it here for now.

I think I will rename it to templates.

It might makes more sense for later on because this sounds more like something, um, I mean something

which has a link with the view controller and model.

However, for us it will be just, I mean it's a, it's a view as well, but since it's outside of SRC,

if it's views, it sounds more like closer to the controller and to the model.

At least this is how I see it.

So templates, test and vendor won't be committed because we added in our git ignore.

We have this one and yes, that sounds good.

Uh, so now what I'm going to do is, um, let's go back to the composer Json file.

So here we have um, let's do so we added this, let's see if that, if that works or not.

So let's do Composer.

Um, composer.

Dump Auto road.

Let's see.

Yes, that's the one.

And so now let's try again.

And let's see.

We need to do composer auto Dom.

So you have to actually you have Composer Dump Auto Load or Composer Dash Composer Dump dash Auto load

or composer dump Auto load.

And that one will just generate the new rules you set in the composer dot Json file.

Beautiful.

Now I will go back to my server and let's see.

I have an issue with the auto load.

So it was a code.

So let's go back to our index and the issues because I forgot the concatenation operator.

So now let's try again.

It doesn't find a bootstrap.

So um, let's see in the bootstrap class src kernel os, we will have to mention that it's in the kernel

namespace.

So composer the auto load of composer can know that um, the folder where bootstrap file is located.

So now let's try again.

We still have an issue because we didn't in, we didn't update the index dot PHP.

So here we have to do also kernel.

Oops.

Perfect.

So now mentioned the right namespace.

You see, it's exactly the same as here.

And then I have bootstrap because I want to call bootstrap.

So let's refresh.

It works.

So now when I go here, I mean the request will go to bootstrap, and bootstrap will go directly in

the constructor and it will load the env file.

I mean the env variable.

Sorry, it's not the env file.

I mean.

Yes.

So the Symfony package will load the env file.

So this one symfony component dot env dot env.

You can also use just the dot env.

Um, composer package.

It doesn't matter the kind of dot env package you use.

Usually they all work the same way it loads the env file and then will display the environment variable

that I set in my env file.

So now if I set the site URL and I want to echo it, I will just do this as you can see.

And now you see I have the URL.